buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://oss.jfrog.org/artifactory/plugins-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }

    }
    dependencies {
        //Check for the latest version here: http://plugins.gradle.org/plugin/com.jfrog.artifactory
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4+"
    }
}

plugins {
    id "java"
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id "maven"
    id "maven-publish"
    id "signing"
    id "com.jfrog.bintray" version "1.7.3"
}

repositories {
    jcenter ()
    maven { url "https://dl.bintray.com/rarebreed/reporter" }
    mavenLocal()
}

group = 'com.github.redhatqe.polarizer'
version = '0.2.2-SNAPSHOT'
def mainClassName = "io.vertx.core.Launcher"
sourceCompatibility = 1.8

String vertxVersion = '3.5.0'
String mainVerticleName = 'com.github.redhatqe.polarizer.MainVerticle'
String watchForChange = 'src/**/*'
String doOnChange = '/.gradlew classes'
String projectURL = 'https://github.com/RedHatQE/polarizer'
String devURL = 'git@github.com:RedHatQE/polarizer.git'
String propFile = System.getProperty("user.home") + "/.polarizer/polarizer-project.properties"

class Creds {
    public String user
    public String pw

    Creds(String u, String p) {
        this.user = u
        this.pw = p
    }
}

def getCreds(String polarizePropertyFile) {
    File f = new File(polarizePropertyFile)
    Properties props = new Properties()
    props.load(f.newDataInputStream())
    return new Creds(props.getProperty("ossrhUsername"), props.getProperty("ossrhPassword"))
}

def getCreds(String polarizePropertyFile, String field1, String field2) {
    File f = new File(polarizePropertyFile)
    Properties props = new Properties()
    props.load(f.newDataInputStream())
    return new Creds(props.getProperty(field1), props.getProperty(field2))
}

Creds credsOssrh = getCreds(propFile)
Creds credsBintray = getCreds(propFile, "bintrayUser", "bintrayPassword")

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'org.testng:testng:6.8.21'
    compile "io.vertx:vertx-web-client:${vertxVersion}"
    compile "io.vertx:vertx-core:${vertxVersion}"
    compile "io.vertx:vertx-web:${vertxVersion}"
    compile "io.vertx:vertx-amqp-bridge:${vertxVersion}"
    compile "io.vertx:vertx-rx-java2:${vertxVersion}"
    compile "io.vertx:vertx-unit:${vertxVersion}"
    compile 'io.reactivex.rxjava2:rxjava:2.1.6'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile group: 'org.apache.activemq', name: 'activemq-all', version: '5.15.2'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    // remove the next 3 when vertx support multipart file uploads
    compile 'org.apache.httpcomponents:httpmime:4.5.2'
    compile 'org.apache.httpcomponents:httpasyncclient:4.1.3'
    compile 'com.mashape.unirest:unirest-java:1.4.9'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.github.redhatqe.polarize:polarize-meta:0.1.0'
    compile 'com.github.redhatqe.polarizer:reporter:0.2.1'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.4.1'
}

allprojects {
    apply plugin: "com.jfrog.artifactory"
}

shadowJar {
    classifier = 'fat'
    manifest {
        attributes("Main-Class": "com.github.redhatqe.polarizer.messagebus.CIBusListener")
    }
}


// Had to add the -quiet option when creating the javadocs for Java 8, or creation will fail
// Generates javadocs
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    options.addStringOption('Xdoclint:none', '-quiet')
    classpath += sourceSets.test.compileClasspath
}

// Generates the javadoc jar
task javadocJar (type: Jar, dependsOn: myJavadocs) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Generates the polarize jar
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

artifacts {
    archives jar, sourceJar, javadocJar, shadowJar
}


signing {
    sign configurations.archives
}

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
        }
    }
    developers {
        developer {
            id "stoner"
            name "Sean Toner"
            email "stoner@redhat.com"
        }
    }

    scm {
        connection "scm:git:${projectURL}.git"
        developerConnection "scm:git:${devURL}"
        url "${projectURL}"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar
            groupId project.group
            artifactId project.name
            version "${version}"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'JAXB classes for xunit and testcases, TestNG reporter')
                root.appendNode('name', 'reporter')
                root.appendNode('url', "${projectURL}")
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = credsBintray.user
    key = credsBintray.pw
    override = true
    publish = true
    pkg {
        repo = project.name
        name = project.name
        licenses = ['Apache-2.0']
        vcsUrl = projectURL
        version {
            name = "${version}"
            desc = 'Data definitions for xunit and testcase for polarize.  TestNG Reporter'
            released  = new Date()
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
            }
            mavenCentralSync {
                sync = true //[Default: true] Determines whether to sync the version to Maven Central.
                user =  "${credsOssrh.user}" //OSS user token: mandatory
                password = "${credsOssrh.pw}" //OSS user password: mandatory
                close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
            }
        }
    }
    publications = ['mavenJava']
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = version.endsWith("SNAPSHOT") ? "oss-snapshot-local" : "oss-release-local"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
        defaults {
            //List of Gradle Configurations (names or objects) from which to collect the list of artifacts to be deployed to Artifactory.
            // The publications tells what files (artifacts) to upload
            publications('mavenJava')

            //properties = ['qa.level': 'basic', 'q.os': 'win32, deb, osx']  //Optional map of properties to attach to all published artifacts
            /*
            The properties closure in the "defaults" task uses the following syntax:
            properties {
                publicationName 'group:module:version:classifier@type', key1:'value1', key2:'value2', ...
            }*/

            publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
            publishArtifacts = true   //Publish artifacts to Artifactory (true by default)
            publishPom = true   //Publish generated POM files to Artifactory (true by default).
            publishIvy = true   //Publish generated Ivy descriptor files to Artifactory (true by default).
        }
    }
    resolve {
        repository {
            repoKey = version.endsWith("SNAPSHOT") ? "libs-snapshot" : "libs-release"
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true
        }
    }
}

task showFiles {
    doLast {
        println components.java
        println configurations.archives.files
    }
}