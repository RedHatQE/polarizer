buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id "application"
    id 'com.github.johnrengelman.shadow' version '2.0.1'
    id "maven"
    id "signing"
}

repositories {
    jcenter ()
}

group = 'com.github.redhatqe.polarizer'
version = '0.2.0-SNAPSHOT'
mainClassName = "io.vertx.core.Launcher"
sourceCompatibility = 1.8

String vertxVersion = '3.5.0'
String mainVerticleName = 'com.github.redhatqe.polarizer.MainVerticle'
String watchForChange = 'src/**/*'
String doOnChange = '/.gradlew classes'
String projectURL = 'https://github.com/RedHatQE/polarizer'
String devURL = 'git@github.com:RedHatQE/polarizer.git'
String propFile = System.getProperty("user.home") + "/.polarizer/polarizer-project.properties"

class Creds {
    public String user
    public String pw

    Creds(String u, String p) {
        this.user = u
        this.pw = p
    }
}

def getCreds(String polarizePropertyFile) {
    File f = new File(polarizePropertyFile)
    Properties props = new Properties()
    props.load(f.newDataInputStream())
    return new Creds(props.getProperty("ossrhUsername"), props.getProperty("ossrhPassword"))
}


dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'org.testng:testng:6.8.21'
    compile "io.vertx:vertx-web-client:${vertxVersion}"
    compile "io.vertx:vertx-core:${vertxVersion}"
    compile "io.vertx:vertx-web:${vertxVersion}"
    compile "io.vertx:vertx-amqp-bridge:${vertxVersion}"
    compile "io.vertx:vertx-rx-java2:${vertxVersion}"
    compile "io.vertx:vertx-unit:${vertxVersion}"
    compile 'io.reactivex.rxjava2:rxjava:2.1.6'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.8.2'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'
    compile group: 'org.apache.activemq', name: 'activemq-all', version: '5.15.2'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    compile 'org.apache.httpcomponents:httpclient:4.5.2'
    // remove the next 3 when vertx support multipart file uploads
    compile 'org.apache.httpcomponents:httpmime:4.5.2'
    compile 'org.apache.httpcomponents:httpasyncclient:4.1.3'
    compile 'com.mashape.unirest:unirest-java:1.4.9'
    compile 'com.google.code.gson:gson:2.6.2'
    compile 'com.github.redhatqe.polarize:polarize-meta:0.1.0'
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3'
}


shadowJar {
    classifier = 'fat'
    manifest {
        attributes("Main-Verticle": "com.github.redhatqe.polarizer.MainVerticle",
                   "Main-Class": mainClassName)
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

run {
    args = [ 'run'
           , mainVerticleName
           , "--redeploy=$watchForChange"
           , "--launcher-class=$mainClassName"
           , "--on-redeploy=$doOnChange"
           ]
}

// Had to add the -quiet option when creating the javadocs for Java 8, or creation will fail
// Generates javadocs
task myJavadocs(type: Javadoc) {
    source = sourceSets.main.allJava
    options.addStringOption('Xdoclint:none', '-quiet')
    classpath += sourceSets.test.compileClasspath
}

// Generates the javadoc jar
task javadocJar (type: Jar, dependsOn: myJavadocs) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// Generates the polarize jar
task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier "sources"
}

artifacts {
    archives jar, sourceJar, javadocJar, shadowJar
}

signing {
    sign configurations.archives
}


uploadArchives {
    repositories {
        mavenDeployer {
            Creds creds = getCreds(propFile)
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: creds.user, password: creds.pw)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: creds.user, password: creds.pw)
            }

            pom.project {
                name project.name
                packaging 'jar'
                description 'Library to help with configuration'
                url projectURL

                scm {
                    connection "scm:git:${projectURL}.git"
                    developerConnection "scm:git:${devURL}"
                    url projectURL
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'stoner'
                        name 'Sean Toner'
                        email 'stoner@redhat.com'
                    }
                }
            }
        }
    }
}